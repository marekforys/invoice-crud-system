plugins {
    id 'java'
    id 'application'
    id 'idea'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

task debugRun(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.voris.invoice.App'
    standardInput = System.in
    debug = true
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainClass = 'com.voris.invoice.App'
}

run {
    standardInput = System.in
    enableAssertions = true
}

repositories {
    mavenCentral()
}

dependencies {
    // Test dependencies
    testImplementation platform('org.junit:junit-bom:5.9.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
    implementation 'org.xerial:sqlite-jdbc:3.45.3.0'
}

test {
    useJUnitPlatform()
    testLogging {
        events 'passed', 'skipped', 'failed'
        showStandardStreams = true
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.voris.invoice.App'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

tasks.withType(Test).configureEach {
    systemProperty 'file.encoding', 'UTF-8'
}

wrapper {
    gradleVersion = '8.0.2'
    distributionType = Wrapper.DistributionType.ALL
}
